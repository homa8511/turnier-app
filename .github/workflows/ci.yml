name: Backend CI, Linting & Code Analysis

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  lint:
    name: Lint Frontend & Backend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'
          cache-dependency-path: |
            frontend/package-lock.json
            backend/package-lock.json
      - name: Install & Lint Backend
        run: |
          npm install
          npm run lint
        working-directory: ./backend
      - name: Install & Lint Frontend
        run: |
          npm install
          npm run lint
        working-directory: ./frontend

  unit-tests:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      - name: Install Backend Dependencies
        run: npm install
        working-directory: ./backend
      - name: Run Backend Unit Tests
        run: npm test
        working-directory: ./backend

  aapi-tests:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Install Backend Dependencies
        run: npm install
        working-directory: ./backend

      - name: Create Test Environment File
        run: cp backend/.env.test ./.env

      - name: Start Database Service
        run: docker compose up -d db

      - name: Wait for Database to be ready
        run: >
          until docker compose exec -T db pg_isready --username=$POSTGRES_USER; do
            echo "Waiting for database...";
            sleep 2;
          done
        env:
          POSTGRES_USER: testuser
      
      - name: Set DB Host for Tests on Runner
        run: echo "POSTGRES_HOST=localhost" >> $GITHUB_ENV

      - name: Run API Tests
        run: npm run test:api
        working-directory: ./backend
        
      - name: Shutdown Database Service
        if: always()
        run: docker compose down